{"name":"Acs","tagline":"Advanced Cloud Simulator","body":"# Introduction\r\nIn a nutshell, ACS is a discrete event based simulator for cloud environments that\r\naims to provide full support for the simulation of any Cloud Computing Aspect.\r\n\r\n# About\r\nAcs is part of a research project in the [University of Oran1 Ahmed Benbella (Algeria)](http://www.univ-oran.dz/).\r\nAcs was developed by Samy Sadi (samy.sadi.contact at gmail) with the\r\nsupervision of Belabbas Yagoubi (byagoubi at gmail).\r\n\r\n# License\r\nACS' code is published under the [GNU General Public License, version 3](http://www.gnu.org/licenses/gpl.txt)\r\n\r\nMoreover, the source and binary forms of ACS are subject to the following\r\ncitation license. By downloading ACS, you agree to cite [the following paper describing ACS](#papers)\r\nin any kind of material you produce where ACS was used to conduct search or experimentation, whether\r\nbe it a research paper, dissertation, article, poster, presentation, \r\nor documentation.\r\n\r\n## Papers <a name=\"papers\"></a>\r\n+ Samy Sadi and Belabbas Yagoubi, \"ACS - Advanced Cloud Simulator: A Discrete Event Based Simulator for Cloud Computing Environments\", \r\nIn Proceedings of ICNAS'2015, Annaba, Algeria. ISBN 978-9931-9142-0-4.\r\n\r\n# Downloads\r\nACS' Jar file can be downloaded [from here](http://github.com/samysadi/acs/releases).\r\n\r\nSample configuration file can be found [here](http://github.com/samysadi/acs/releases).\r\n\r\n# Documentation\r\nThe Html java documentation can be found [here](http://samysadi.github.io/acs/javadoc/).\r\n\r\n# Contributing\r\nWe accept Pull Requests. Please use [developer mailing list][ml] as the main channel of communication for contributors.\r\n\r\nAlso make sure to respect the next guidelines:\r\n+ Respect the code style.\r\n+ The simpler diffs the better. For instance, make sure the code was not reformatted.\r\n+ Create separate PR for code reformatting.\r\n+ Make sure your changes does not break anything in existing code. In particular, make sure the existing junit tests can complete successfully.\r\n\r\n# Usage\r\n## Minimal working example\r\nDownload the latest jar file (see downloads section) and make sure to include it to your build path.\r\nDownload the configuration sample file (see downloads section) and unzip it somewhere in your file system.\r\n\r\nCreate a new class and write the following code:\r\n```java\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tSimulator simulator = FactoryUtils.generateSimulator(\"C:\\\\acs\\\\config\\\\main.config\"); //assuming this is the path where you have extracted the downloaded configuration\r\n\t\tsimulator.start();\r\n\t}\r\n```\r\n\r\n## Implementing your own models and algorithms\r\nAssume you want to define a custom VirtualMachine placement policy.\r\nThe interface that defines Vm's placement is VmPlacementPolicy in the com.samysadi.acs.service.vmplacement\r\npackage.\r\nAll you have to do is define your new class that implements that interface, and add a configuration line to tell\r\nACS to use the new policy.\r\n\r\nAssuming your new implementation is named MyVmPlacementPolicy in the package mypackage, then\r\nyou have to add the following configuration line (preferably in the classes.config file):\r\n```\r\nVmPlacementPolicy_Class=mypackage.MyVmPlacementPolicy\r\n```\r\n\r\nRegarding the implementation, note that you can use simply override the AbstractVmPlacementPolicy.\r\nSuch implementation will look something like this:\r\n```java\r\npackage mypackage;\r\npublic class MyVmPlacementPolicy extends VmPlacementPolicyAbstract {\r\n\t@Override\r\n\tprotected Host _selectHost(VirtualMachine vm, List<Host> poweredOnHosts, List<Host> excludedHosts) {\r\n\t\tHost bestHost;\r\n\t\tIterator<Host> it = new ShuffledIterator<Host>(poweredOnHosts);\r\n\t\tfor (Host candidate: poweredOnHosts) {\r\n\t\t\tif (excludedHosts != null && excludedHosts.contains(candidate))\r\n\t\t\t\tcontinue;\r\n\t\t\tif (candidate.getPowerState() == PowerState.ON) {\r\n\t\t\t\tfinal double s = computeHostScore(vm, candidate);\r\n\t\t\t\tif (s>0) {\r\n\t\t\t\t\t//Your own code to select the best host\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bestHost;\r\n\t}\r\n}\r\n```\r\n\r\n## Mastering the configuration files\r\nConfiguration files can be used to modify different simulation parameters\r\nas the network topology, the number of hosts, the configuration of those hosts and so forth.\r\nThey can also be used to define user behaviours by generating different workloads.\r\n\r\nIn another hand, you can also define which output you want to generate (and where you want the output to be saved)\r\nusing configuration files.\r\n\r\nBesides, configuration files can be used to define custom implementations regarding different parts of ACS.\r\n\r\nMake sure to have a look at the configurations samples to learn more about this.  \r\n\r\n\r\n","google":"UA-62388920-1","note":"Don't delete this file! It's used internally to help with page regeneration."}